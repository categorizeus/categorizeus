refactor java for better code quality
    relate messages into corpus API and CLI
add predicate and transitive stuff for tag search, for first few messages
avatar support pulled from google or twitter
instagram API integration
signin with twitter integration
signin with google integration
messages as immutable for now? seems like a good start, maybe just include relationships in message model
analyze different approaches for loading threads, tag search and do some performance comparison
	this turns out to open a can of worms relate to the edge structure and all that
	let's think more about that and revisit after this basic refactoring
login stuff just blindly fails right now, that is no bueno
replies in line broken yet again, let's fix it after refactor
Need to rethink initialization stuff - there is too much stuff in Config, maybe an Initialization class?
    at least we should support mysql as well for generality, again this is not even considered
pull class initialization stuff into corpus, read files from classpath and get rid of this FS path nonsense
write up some discussion of the fact that we are assuming the only type of relationship is unique,
that is not reflected in database contraints (e.g. X repliesTo Y, it's a Many:One relationship)
compare with hibernate approach and triple store approaches

add forum concept? seems like a necessary component, some concept of list/group of messages
    This seems good, but let's hold off need to get the whole structure moving first.

    ** need to pull out request objects rather than passing bodies into communicator
    Here's the plan - let's get the core functionality pulled into a higher level repository.
    It should be agnostic about whether it is SQL or whatever, even mysql vs postgres will be different initialization
    so this stuff is way too tightly coupled right now
    
    Also, obviously we have no unit testing, this was just a quick hack, so let's break things down. 
    There's also no reason to work on UI etc until we have a cleaner basic functionality
    I particularly dislike the JSON streams ending up at the repository level that seems
    very clearly wrong so let's do it like this
    
        1) Create an initialization rudimentary command line interface
        2) Move the seed data from the raw SQL into higher level objects
           this should show basic exercise of the simple API we're working with here
        3) Get all the SQL stuff pushed down into the repository level
        4) Look at request objects and revisit this whole message relation, thread query stuff
        5) stabilize the basic API, make sure the models are decoupled from the SQL schema
        6) Update the javascript to handle the new API
        7) make some simple js/css updates to make it more usable
    
    Revisit the planning stage

General Plan
    Get basic functionality working properly
    Update basic UI look and feel
    rethink overall UI, functionality
    add keyboard support, gesture support
    avatar support

** Better Login Failure Page
** Better design on post, design
** tight coupling between input JSON objects and APIs, SQL repositories shouldn't know about JSON
    ^^quite important
** Admin user stuff is hardcoded to a specific user number, that needs to stop
** session management and cookie stuff needs to be cleaned up and documented
    logic separation isn't super clean here, need to sort this out

>>>>>>>>>>>> Twitter Sign In Integration <<<<<<<<<<<<<<

For twitter integration, need to look at not using the accesstoken hard coded there
this in general we need to do in order to login each time with lambda
so let's put a pause on that and move back to fixing the configuration part, which is messed up anyway
			Twitter twitter = (Twitter)request.getSession().getAttribute("twitter");
			if(twitter!=null){
				System.out.println("Twitter session object found " + twitter.getScreenName());
			}else{
				System.out.println("Twitter Login Object Not Present ");
			}

So there isn't even a real internal API for using this thing
Let's put quite a bit of thought into THAT

Change the way of running the standalone to run via jar, you idiot
    do some script to move stuff from home directory into building jar with shell script
fix new post flow, add keyboard shortcuts, figure out like autoscroll or something
finish twitter API integration so we have some kind of data to look at
use model needs work
Need a twitter enabled flag in categorizeus.properties
need to fix properties file integration and running as a jar, critically
More documentation:

    AWS Integration
        wow that is clear as fucking mud, preferably we need a cloudformation script
        or at least a bloody bit of java setting things up
        let's also move all these settings into the properties file
        and I think also move the twitter settings into categorizeus.properties
    Google Apps Integration
    
    How does login with twitter work in the context of a Lambda application that has no session object,
    looks like have to do request against twitter API each time?
    
Externalize handlebars templates!

Review basic post and refresh flow, we need to make this thing basically useful, so two people can have a convo on screencast. 
    ^^above is the goal state, will show some rudimentary understanding of UX, etc. 
    the biggest issue, the #1 problem is after posting a reply you don't see it on the same screen
    
Initialization Fix inside of App.java
    InputStream input = new FileInputStream("/home/ubuntu/categorizeus/core/src/main/resources/categorizeus.properties");
    I hate this initialization shit with a burning fucking passion

Hey guess what more initialization ?!
    Need to make this seemlessly work from a jar and get it deployed on S3/lambda again
    and then make the SAME codebase work with inside the jar and on the local file system
    maybe like have a series of places to search for the categorizeus.properties file?

Improved rudimentary UI stuff
    create post page
    next and previous buttons
    review search vs tag mode stuff
    
Thumbnail creation for large uploads



Review and Cleanup, descriptions for use as a compsci teaching tool
basic client implementation, rough capacity writing and metrics
    how would triggering action based on code work
    
think through the basic data model, maybe an OWL model, dunno

corpus of information beyond ngrams, spellcheck suggestions might offer some level 
of insight into phonological or morphological similarities, the basic idea is looking at related words
It's not clear if this particular data structure is all that well suited for what we want to do,
but let's get something running in it and then review, the linguistic variant stuff might
happen in one of the private code binaries and then we feed in here for demo purposes

generate ERD diagram of data model

performance testing on data model
explore idea of tags having a real valued relationship to a message (this is in the data model already)


*** include associated tags in http JSON response from the thread endpoint *** 

tune this and review it several times, setup blog host, then move on to lyrics generator thing

General Code review, blog post

Think about hibernate style 1:1 object relationship and how that should all work

bloody hell this secure shell bullshit thing about keyboard shortcutes, ctrl+w closes window fucking great
	maybe is easier to remap nano than chrome or somet shit

